if(is.numeric(num) && length(sub) < num){
rank <- c(rank, NA)
}else{
if(num == "best"){
index <- 1
}else if (num == "worst"){
index <- nrow(sub_state[head])
}else{
index <- num
}
hospital_index <- order(sub, sub_state[,2])[index]
rank <- c(rank, as.vector(sub_state[,2][hospital_index]))
}
state <- c(state, i)
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
?inverse
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<- inverse
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
##This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse had already been computed, and the
## matrix hasn't changed, then the function retrieves inverse from the cache
cacheSolve <- function(x,...)  {
m <- x$getInverse()
if(!is.null(m))  {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setInverse(m)
m
}
mat <- matrix(1:4, 2,2)
makeCacheMatrix(mat)
makeCacheMatrix(mat)
cacheSolve(mat)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## cacheSolve computes the inverse matrix of the
## makeCacheMatrix object. The inverse matrix is calculated only once,
## if it already exist then the method will print the message
## "getting cached data" and will retrieve the cached matrix.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cacheSolve(mat)
makeCacheMatrix(mat)
x <- mat
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
cacheSolve(mat)
makeCacheMatrix <- function(mtx = matrix()) {
inverse <- NULL
set <- function(x) {
mtx <<- x;
inverse <<- NULL;
}
get <- function() return(mtx);
setinv <- function(inv) inverse <<- inv;
getinv <- function() return(inverse);
return(list(set = set, get = get, setinv = setinv, getinv = getinv))
}
## This function computes the inverse of the special
## "matrix" returned by `makeCacheMatrix` above. If the inverse has
## already been calculated (and the matrix has not changed), then
## `cacheSolve` should retrieve the inverse from the cache.
cacheSolve <- function(mtx, ...) {
inverse <- mtx$getinv()
if(!is.null(inverse)) {
message("Getting cached data...")
return(inverse)
}
data <- mtx$get()
invserse <- solve(data, ...)
mtx$setinv(inverse)
return(inverse)
}
makeCacheMatrix <- function(mtx = matrix()) {
inverse <- NULL
set <- function(x) {
mtx <<- x;
inverse <<- NULL;
}
get <- function() return(mtx);
setinv <- function(inv) inverse <<- inv;
getinv <- function() return(inverse);
return(list(set = set, get = get, setinv = setinv, getinv = getinv))
}
## This function computes the inverse of the special
## "matrix" returned by `makeCacheMatrix` above. If the inverse has
## already been calculated (and the matrix has not changed), then
## `cacheSolve` should retrieve the inverse from the cache.
cacheSolve <- function(mtx, ...) {
inverse <- mtx$getinv()
if(!is.null(inverse)) {
message("Getting cached data...")
return(inverse)
}
data <- mtx$get()
invserse <- solve(data, ...)
mtx$setinv(inverse)
return(inverse)
}
mat <- matrix(1:4, 2,2)
cacheSolve(mat)
q <- makeCacheMatrix(mat)
q
cacheSolve(q)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## cacheSolve computes the inverse matrix of the
## makeCacheMatrix object. The inverse matrix is calculated only once,
## if it already exist then the method will print the message
## "getting cached data" and will retrieve the cached matrix.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
q <- makeCacheMatrix(mat)
cacheSolve(q)
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<- inverse
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
##This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse had already been computed, and the
## matrix hasn't changed, then the function retrieves inverse from the cache
cacheSolve <- function(x,...)  {
m <- x$getInverse()
if(!is.null(m))  {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setInverse(m)
m
}
cacheSolve(makeCacheMatrix(mat))
R.version.string
install.packages("swirl")
library(swirl)
ls()
x <10
x <-10
ls()
rm(list = ls())
swirl()
install_from_swirl("R Programming")
library("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
x -3
y <- x -3
y
c(1.1, 9, 3.14)
z<-c(1.1, 9, 3.14)
?c
z
c(z,555,z)
Z * 2 + 100
z * 2 + 100
my_sqrt<-sqrt(z -1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
list.files()
list.files("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.info("mytest.R")
file.info("mytest.R")$mode
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R", 'folder1', 'folder2')
file.path('folder1', 'folder2')
?dir.create
dir.create(c("testdir2", "testdir3", recursive = TRUE)
a
dir.create(c("testdir2", "testdir3"), recursive = TRUE)
dir.create(file.path(c("testdir2", "testdir3")), recursive = TRUE)
?file.path
file.path('folder1', 'folder2')
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
getwd()
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
?`:`
seq()
seq(1,20)
seq(0,10, by = =0.5)
seq(0,10, by =0.5)
seq(5,10 length=30)
seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
c(.5,55,-10,6)
num_vect <- c(.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Rodrigo")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1;3), c("X", "Y", "Z"), sep = "")
paste(c(1:3), c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[c(-2, -10)]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar",
| "norf")
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
matrix(rnorm(36*36), 36,36
)
matrix(rnorm(36*36, mean = 5, sd = 5), 36,36)
x <- matrix(rnorm(36*36, mean = 5, sd = 5), 36,36)
plot(x)
plot(matrix(rnorm(36*36, mean = 5, sd = 5), 36,36))
plot(matrix(rnorm(36*36, mean = 5, sd = 5), 36,36))
plot(matrix(rnorm(36*36, mean = 5, sd = 5), 36,36))
plot(matrix(rnorm(36*36, mean = 5, sd = 5), 36,36))
plot(matrix(rnorm(36*36, mean = 5, sd = 5), 36,36))
plot(matrix(rnorm(36*36), 36,36))
plot(matrix(rnorm(36*36), 36,36))
plot(matrix(rnorm(36*36), 36,36))
plot(matrix(rnorm(36*36), 36,36))
x <- rep(matrix(rnorm(36*36, mean = 5, sd = 5), 36,36), times = 10)
x[[2]]
x
x <- rep(matrix(rnorm(36*36, mean = 5, sd = 5), 36,36), times = 2)
x
x <- matrix(rep(matrix(rnorm(36*36, mean = 5, sd = 5), 36,36), times = 2),2,2)
x
36 *36 *2
x <- matrix(rep(matrix(rnorm(36*36, mean = 5, sd = 5), 36,36), times = 2),36,36,2)
x
plot(x)
plot(x[1])
x[[1]]
x[1]
x
x <- matrix(rep(matrix(rnorm(100), 10,10), times = 2),10,10,2)
x
array(rnorm(1000), dim = c(10,10,10))
x <- array(rnorm(1000), dim = c(10,10,10))
plot(x)
x <- array(rnorm(100), dim = c(10,10,10))
x
x <- array(rnorm(1000), dim = c(10,10,10))
x <- array(rnorm(10), dim = c(10,10,10))
x
library(akima)
install.packages("akima")
library(akima)
im <- with(x,interp(x,y,z))
install.packages("scatterplot3d")
library(scatterplot3d)
attach(x)
as.data.frame(x)
data <- as.data.frame(x)
library(scatterplot3d)
attach(data)
scatterplot3d(wt,disp,mpg, main="3D Scatterplot")
attach(mtcars)
plot(wt, mpg, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
scatterplot3d(data,disp,mpg, main="3D Scatterplot")
mtcars
names(data)
scatterplot3d(wt,disp,mpg, main="3D Scatterplot")
names(data) <- c("x","y","z")
names(data)
names(x)
data <- as.data.frame(x)
data
x <- array(rnorm(27), dim = c(3,3,3))
x
data <- as.data.frame(x)
data
x <- data.frama(rnorm(27), dim = c(3,3,3))
x <- data.frame(rnorm(27), dim = c(3,3,3))
x
rnorm(27), dim = c(3,3,3)
(rnorm(27), dim = c(3,3,3)
array(rnorm(27), dim = c(3,3,3)
)
as.dataframe(array(rnorm(27), dim = c(3,3,3)))
as.data.frame(array(rnorm(27), dim = c(3,3,3)))
as.list(array(rnorm(27), dim = c(3,3,3)))
install.packages("a2df")
list(rnorm(27), dim = c(3,3,3)))
list(rnorm(27), dim = c(3,3,3))
list(array(rnorm(27), dim = c(3,3,3)))
x <- list(array(rnorm(27), dim = c(3,3,3)))
class(x)
as.data.frame(x)
list[1]
x <- list(array(rnorm(27), dim = c(3,3,3)))
x
list[,,1]
list[[1]]
x[1]
x[[1]
]
x[,,1]
x[,1]
x[1]
x[2]
x[[2]]
x
x[[1]][,,1]
x[[1]][,,2]
as.data.frama(x[[1]][,,1])
as.data.frame(x[[1]][,,1])
apply(x[[1]], as.data.frame)
apply(x[[1]], FUN = as.data.frame)
lapply(x[[1]], FUN = as.data.frame)
sapply(x[[1]], FUN = as.data.frame)
sapply(x, FUN = as.data.frame)
rapply(x, FUN = as.data.frame)
rapply(x, as.data.frame)
tapply(x, as.data.frame)
lapply(x, as.data.frame)
data.frame(array(rnorm(1000), dim = c(10,10,10)))
data.frame(array(rnorm(27), dim = c(3,3,3)))
data
x <-(array(rnorm(27), dim = c(3,3,3)))
split(x)
names(f)
names(x)
colnames(x)
x
x[,,1]
data.framex(x[,,1])
data.frame(x[,,1])
names(data.frame(x[,,1]))
list <- list()
list[[1]] <- data.frame(x[,,1])
list[[2]] <- data.frame(x[,,2])
list[[3]] <- data.frame(x[,,3])
list
attach(list)
attach(list[[1]])
scatterplot3d(X1,X2,X3, main="3D Scatterplot")
class(list)
as.data.frame(list)
as.data.frame(list[[1]])
as.data.frame(list[[1]],list[[2]],list[[3]])
rbind(list[[1]],list[[2]],list[[3]])
plot(rbind(list[[1]],list[[2]],list[[3]]))
install.packages("geoR")
library(geoR)
library(geoR)
ozone<-read.table("http://www.ats.ucla.edu/stat/r/faq/ozone.csv", sep=",", header=T)
head(ozone, n=10)
dists <- dist(ozone[,3:4])C
dists <- dist(ozone[,3:4])
dists
breaks = seq(0, 1.5, l = 11)
> list[[3]] <- data.frame(x[,,3])
variog
vari
v
library(geoR)
v1 <- variog(coords = ozone[,3:4], data = ozone[,2], breaks = breaks)
v1.summary <- cbind(c(1:10), v1$v, v1$n)
colnames(v1.summary) <- c("lag", "semi-variance", "# of pairs")
v1.summary
plot(v1, type = "b", main = "Variogram: Av8top")
v1
